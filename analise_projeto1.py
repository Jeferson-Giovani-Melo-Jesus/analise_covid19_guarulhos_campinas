# -*- coding: utf-8 -*-
"""Analise_projeto1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hMn1JC4H3QqUKsYK7hY_rqxzd91seVR5

### Importação dos Dados
"""

import pandas as pd
import numpy as np

covid =  pd.read_csv('/content/drive/MyDrive/covid_sp_alterado.csv', sep=';', encoding='utf-8')

covid.head()

covid = covid.drop(columns=['longitude'])

covid.head()

covid = covid.drop(columns=['cosos_pc'])

covid.head()

covid.shape

#Analise dos Atributos
covid.dtypes

"""### Filtrando duas Cidades: Campinas e Guarulhos"""

covid_campinas = covid.loc[covid.municipio == 'Campinas']
covid_campinas.head(3)

#Criação de uma coluna com a porcentagem de idosos
covid_campinas['porcentagem_idosos'] = 100*covid_campinas['pop_60'] / covid_campinas['pop']
covid_campinas.head(3)

covid_guarulhos = covid.loc[covid.municipio == 'Guarulhos']
covid_guarulhos.head(3)

#Criação de uma coluna com a porcentagem de idosos
covid_guarulhos['porcentagem_idosos'] = 100*covid_guarulhos['pop_60'] / covid_guarulhos['pop']
covid_guarulhos.head(3)

covid_campinas.shape

covid_guarulhos.shape

"""### Medidas de Centralidade

### Média

Campinas
"""

covid_campinas['obitos_novos'].mean()

round(covid_campinas['obitos_novos'].mean(),2)

covid_campinas.casos_novos.mean()

round(covid_campinas['casos_novos'].mean(),2)

"""Guarulhos"""

covid_guarulhos['obitos_novos'].mean()

round(covid_guarulhos['obitos_novos'].mean(),3)

covid_guarulhos.obitos_novos.mean()

round(covid_guarulhos['casos_novos'].mean(),3)

"""### Mediana

Campinas
"""

covid_campinas['obitos_novos'].median()

covid_campinas.obitos_novos.median()

covid_campinas['casos_novos'].median()

covid_campinas.casos_novos.median()

"""Guarulhos"""

covid_guarulhos['obitos_novos'].median()

covid_guarulhos.obitos_novos.median()

covid_guarulhos['casos_novos'].median()

covid_guarulhos.casos_novos.median()

"""### Moda

Campinas
"""

covid_campinas['obitos_novos'].mode()

covid_campinas['dia'].mode()

covid_campinas['mes'].mode()

"""Gurulhos"""

covid_guarulhos['obitos_novos'].mode()

covid_guarulhos['dia'].mode()

covid_guarulhos['mes'].mode()

"""### Descrição Geral"""

covid_campinas.describe()

round(covid_campinas.describe(),1)

covid_guarulhos.describe()

round(covid_guarulhos.describe(),1)

covid_guarulhos['casos_novos'].describe()



"""## Distribuição de Frequencia: Histograma"""

covid_campinas2021 = covid_campinas.loc[covid_campinas.data > '2020-12-31']
covid_campinas2021

covid_campinas2021.shape

covid_campinas2021.obitos_novos.mode()

covid_campinas2021.obitos_novos.median()

round(covid_campinas2021.obitos_novos.mean(), 2)

import plotly.express as px

grafico = px.histogram(covid_campinas2021, x = "obitos_novos", nbins=30)
grafico.update_layout(width=400,height=400,title_text="Óbitos Novos em Campinas em 2021")
grafico.show()

grafico = px.histogram(covid_campinas, x = "casos_novos", nbins=30)
grafico.update_layout(width=400,height=400,title_text="Casos Novos em Campinas em 2021")
grafico.show()

grafico = px.histogram(covid_guarulhos, x = "casos_novos", nbins=30)
grafico.update_layout(width=400, height=400, title_text= "Casos Novos em Guarulhos em 2021")
grafico.show()

"""## Medidas De Posição"""

# Minimo
covid_campinas['obitos_novos'].min()

covid_campinas.casos_novos.min()

#maximo
covid_campinas['obitos_novos'].max()

covid_campinas.casos_novos.max()

# Primeiro Quartil
covid_campinas['casos_novos'].quantile(q=0.25)

# Segundo Quartil (mediana)
covid_campinas['casos_novos'].quantile(q=0.5)

#Terceiro Quantil
covid_campinas['casos_novos'].quantile(q=0.75)

#Podemos trabalhar com qualquer quantidade de quartis

covid_campinas['casos_novos'].describe()

covid_guarulhos['obitos_novos'].describe()

covid_guarulhos['casos_novos'].describe()

"""## Gráfico BoxPlot e Outliers"""

import plotly.express as px

"""Campinas"""

grafico =px.box(covid_campinas, y= 'casos_novos')
grafico.show()

outlier_sup = covid_campinas['casos_novos'].quantile(q=0.75) + 1.5 *(covid_campinas['casos_novos'].quantile(q=0.75) - covid_campinas['casos_novos'].quantile(q=0.25))
outlier_sup

outlier_inf = covid_campinas['casos_novos'].quantile(q=0.25) - 1.5 *(covid_campinas['casos_novos'].quantile(q=0.75) - covid_campinas['casos_novos'].quantile(q=0.25))
outlier_inf

sem_outliers = covid_campinas.loc[covid_campinas.casos_novos <= outlier_sup]

sem_outliers.head()

grafico = px.box(sem_outliers, y="casos_novos")
grafico.show()

grafico = px.box(covid_guarulhos, y="casos_novos")
grafico.show()

outlier_sup2 = covid_guarulhos['casos_novos'].quantile(q=0.75) + 1.5 * (covid_guarulhos['casos_novos'].quantile(q=0.75) - covid_guarulhos['casos_novos'].quantile(q=0.25))
outlier_sup2

outlier_inf2 = covid_guarulhos['casos_novos'].quantile(q=0.25) - 1.5 * (covid_guarulhos['casos_novos'].quantile(q=0.75) - covid_guarulhos['casos_novos'].quantile(q=0.25))
outlier_inf2

sem_outliers2 = covid_guarulhos.loc[covid_guarulhos.casos_novos <= outlier_sup2]

sem_outliers2.head()

grafico = px.box(sem_outliers2, y="casos_novos")
grafico.show()

"""## Medida De Dispersão"""

# Variação óbitos novos
covid_guarulhos['obitos_novos'].var()

covid_campinas['obitos_novos'].var()

# Variação casos novos
covid_guarulhos['casos_novos'].var()

covid_campinas['casos_novos'].var()

# Desvio padrão Óbitos Novos
covid_campinas['obitos_novos'].std()

covid_guarulhos['obitos_novos'].std()

# Desvio padrão de Casos Novos
covid_campinas['casos_novos'].std()

covid_guarulhos['casos_novos'].std()

covid_campinas['casos_novos'].describe()

covid_guarulhos['casos_novos'].describe()

"""## Teste De Normalidade

TESTE DE NORMALIDADE
Existe teste de normalidade númerico e testes gráficos:

Shapiro-Wilk (limite de 5000 amostra)

Kolmogorov_Smirnov

Histograma

QQpolot

## Histograma
"""

import seaborn as sns
sns.histplot(covid_campinas, x='casos_novos', bins=32, color="orange", kde=True, stat="count")

"""## QQPLOT"""

import scipy.stats as stats
import matplotlib.pyplot as plt

stats.probplot(covid_campinas['casos_novos'], dist="norm", plot=plt)
plt.title("Análise de Normalidade")
plt.show()

"""### Teste de Shapiro-Wilk

Critérios:

NIVEL DE SIGNIFICÂNCIA DE 0,05 OU 5% (MAIS UTILIZADO)

QUANDO p > 0,05 (Distribuição normal)
"""

stats.shapiro(covid_campinas['casos_novos'])

estatistica, p = stats.shapiro(covid_campinas['casos_novos'])
print('Estatistica do teste (w)=', round(estatistica,2))
print('p_valor', p)

"""### Teste Lilliefors (Kolmogorov-Smirnov)*texto em itálico*"""

import statsmodels
from statsmodels.stats.diagnostic import lilliefors

estatistica, p = statsmodels.stats.diagnostic.lilliefors(covid_campinas['casos_novos'], dist='norm',)
print('Estatistica do teste (D)=', round(estatistica,2))
print('p_Valor', p)

"""## **Correlação Linear**

### Grafico Disperção
"""

import matplotlib.pyplot as plt

plt.scatter(covid_campinas['casos'], covid_campinas['obitos'])
plt.title('Correlação Linear')
plt.xlabel('Casos')
plt.ylabel('Óbitos')
plt.grid(False)
plt.show()

df = covid_campinas[['casos', 'casos_novos', 'obitos', 'obitos_novos']]
df

"""Determinação da Correlação

method:

"pearson" para dados paramétricos(normalidade e homocedasticidade).

"spearman" (volume "grande" de dados não paraméticos: maior ou igual a 30).

"kendall" (volume "pequeno" de dados não parametricos: menor que 30).

Normalidade
"""

stats.probplot(covid_campinas['casos'], dist="norm", plot=plt)
plt.title("Análise de Normalidade")
plt.show()

estatistica, p = stats.shapiro(covid_campinas['casos'])
print(p)

"""### Correlação Linear"""

correlaçoes = df.corr(method='spearman')
correlaçoes

import seaborn as sns

plt.figure()
sns.heatmap(correlaçoes, annot=True);

# Todos os grafocos de disperçao
sns.pairplot(df);

"""## Introdução à Regressão Linear Simples com Stasmodels"""

import statsmodels.formula.api as smf
import statsmodels.stats.api as sms

regressao = smf.ols('obitos ~ casos', data = covid_campinas).fit()
print(regressao.summary())

coefs = pd.DataFrame(regressao.params)
coefs.columns = ['Coeficientes']
print(coefs)

"""Equação:

obitos = 62,2 + 0,039*casos
"""

import matplotlib.pyplot as plt

plt.scatter(y=covid_campinas.obitos, x=covid_campinas.casos, color='blue', s=2, alpha=0.5)
X_plot = np.linspace(min(covid_campinas.casos), max(covid_campinas.casos), len(covid_campinas.obitos))
plt.plot(X_plot, X_plot*regressao.params[1] + regressao.params[0], color='r')
plt.title("Reta de regressão")
plt.ylabel("Óbitos")
plt.xlabel("Casos")
plt.show()

